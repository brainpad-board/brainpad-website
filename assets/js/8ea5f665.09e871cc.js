"use strict";(self.webpackChunkduelink=self.webpackChunkduelink||[]).push([[3219],{5426:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"engine/regions","title":"Regions","description":"---","source":"@site/docs/engine/regions.mdx","sourceDirName":"engine","slug":"/engine/regions","permalink":"/docs/engine/regions","draft":false,"unlisted":false,"editUrl":"https://github.com/ghi-electronics/duelink-website/tree/dev/docs/engine/regions.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"File System","permalink":"/docs/engine/filesystem"},"next":{"title":"Scheduler","permalink":"/docs/engine/scheduler"}}');var o=i(4848),r=i(8453);const t={},l="Regions",d={},c=[{value:"Default Region",id:"default-region",level:2},{value:"Starting a New Region",id:"starting-a-new-region",level:2},{value:"Removing Regions",id:"removing-regions",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"regions",children:"Regions"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"The memory area that holds scripts can be split into regions. This allows users to erase and modify specific regions. For example, a region can carry the module drivers, where a second region can be the user code."}),"\n",(0,o.jsx)(n.p,{children:"The interpreter treats all regions as one. Having regions is helpful for managing what parts of code can be erased and modified."}),"\n",(0,o.jsx)(n.p,{children:"This feature is used by default on all modules, where region 0 loaded by us at production, containing that module's specific drivers. This way, you can now record (load) your own code without erasing/modifying the drivers."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["All modules ship with drivers that are preloaded into region 0. For example, displays drivers include ",(0,o.jsx)(n.code,{children:"GetW"})," function to return the display width. This function is found in the first region."]})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"default-region",children:"Default Region"}),"\n",(0,o.jsxs)(n.p,{children:["On a device that was freshly loaded with firmware, there is a single region. Use ",(0,o.jsx)(n.code,{children:"Mem()"})," to get statistics on available memory."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-region-mem.png",alt:"Mem() command"})}),"\n",(0,o.jsxs)(n.p,{children:["The usual ",(0,o.jsx)(n.code,{children:"new"})," and ",(0,o.jsx)(n.code,{children:"list"})," are now accessing region 0. You can now load the region with a driver, a function, or whatever you like to keep it separate from region 1."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"starting-a-new-region",children:"Starting a New Region"}),"\n",(0,o.jsx)(n.p,{children:"Use the console to load this example function."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:'fn FirstRgn()\r\n PrintLn("This is in first region")\r\nfend\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Record the function and then enter ",(0,o.jsx)(n.code,{children:"FirstRgn()"})," in immediate window. This will run the function and show the string."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-first-region.png",alt:"FirstRgn() Command"})}),"\n",(0,o.jsxs)(n.p,{children:["Try ",(0,o.jsx)(n.code,{children:"Mem()"})," to see some memory statistics."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-log-mem.png",alt:"FirstRgn() Command"})}),"\n",(0,o.jsxs)(n.p,{children:["Now switch to second region using ",(0,o.jsx)(n.code,{children:"Region(1)"}),". This will lock the size of the first region to the next allowed block and start second region access."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-switch-region.png",alt:"Switch Region Command"})}),"\n",(0,o.jsxs)(n.p,{children:["Try ",(0,o.jsx)(n.code,{children:"Mem()"}),' again to see the difference. Note how there is "*" mark on the currently selected region.']}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-mem-region.png",alt:"Log Region1 Memory"})}),"\n",(0,o.jsx)(n.p,{children:"Click the list button on the console to reload the script. This will now show the content of region 1, which is still blank."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-list-region.png",alt:"Log Region1 Memory"})}),"\n",(0,o.jsx)(n.p,{children:"Go ahead and enter this code then record it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"while 1\r\n FirstRgn()\r\n wait(1000)\r\nwend\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the program and you will see the string getting printed once a second."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-run.png",alt:"Console Run"})}),"\n",(0,o.jsxs)(n.p,{children:["Try ",(0,o.jsx)(n.code,{children:"Mem()"})," yet again to see the regions with memory being used."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-log-region.png",alt:"Console Run"})}),"\n",(0,o.jsxs)(n.p,{children:["To see all regions together, just like how the system sees them, use ",(0,o.jsx)(n.code,{children:"list all"})," command in the immediate window."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"/img/console-list-all.png",alt:"Console Run"})}),"\n",(0,o.jsxs)(n.p,{children:["While the size of the first region is locked after the first call to ",(0,o.jsx)(n.code,{children:"Region(1)"}),", its content is not locked."]}),"\n",(0,o.jsxs)(n.p,{children:["In the immediate window, enter ",(0,o.jsx)(n.code,{children:"Region(0)"}),", then ",(0,o.jsx)(n.code,{children:"Mem()"}),' to see the "*" mark on region 0, then use the console buttons to list the code again. This time the console will show the contents of region 0.']}),"\n",(0,o.jsx)(n.p,{children:"Modify the code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:'fn FirstRgn()\r\n Print("This is in first region MODIFIED")\r\nfend\n'})}),"\n",(0,o.jsx)(n.p,{children:"Run the program and the new modified string will now show once a second. Note how the program loop in region 1 was not modified."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"removing-regions",children:"Removing Regions"}),"\n",(0,o.jsxs)(n.p,{children:["The command ",(0,o.jsx)(n.code,{children:"new all"})," is used to erase all regions contents and reset to having a single region that spans the entire user memory."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"new all"})," is useful when region 0 code has grown beyond what was allocated with first ",(0,o.jsx)(n.code,{children:"Region(1)"})," call. Using ",(0,o.jsx)(n.code,{children:"new all"})," will unlock regions 0. You can now enter the larger code into region 0 then start region 1 afterwards. The system will reallocate the size of region 0 to what is necessary (to the nearest allowed block) and then leave the remaining memory to regions 1."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"While it is theoretically possible to have more than one region, we only support 2 regions to keep it manageable."})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);