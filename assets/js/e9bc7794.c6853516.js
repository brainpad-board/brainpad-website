"use strict";(self.webpackChunkduelink=self.webpackChunkduelink||[]).push([[4713],{1683:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"engine/graphics","title":"Graphics","description":"---","source":"@site/docs/engine/graphics.mdx","sourceDirName":"engine","slug":"/engine/graphics","permalink":"/docs/engine/graphics","draft":false,"unlisted":false,"editUrl":"https://github.com/ghi-electronics/duelink-website/tree/dev/docs/engine/graphics.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Standard Library","permalink":"/docs/engine/stdlib"},"next":{"title":"File System","permalink":"/docs/engine/filesystem"}}');var d=r(4848),s=r(8453);const t={},l="Graphics",c={},a=[{value:"Configuration",id:"configuration",level:2},{value:"Drawing",id:"drawing",level:2},{value:"Color",id:"color",level:2},{value:"Image",id:"image",level:2},{value:"SPI Display",id:"spi-display",level:2},{value:"I2C Display",id:"i2c-display",level:2},{value:"NeoPixel Smart LEDs",id:"neopixel-smart-leds",level:2},{value:"LED Matrix Scanner",id:"led-matrix-scanner",level:2},{value:"LED Matrix List",id:"led-matrix-list",level:2}];function x(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"graphics",children:"Graphics"})}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.p,{children:"The graphics support is versatile and supports drawing on displays and LEDs of many types."}),"\n",(0,d.jsx)(n.admonition,{type:"tip",children:(0,d.jsxs)(n.p,{children:["The graphics libraries do not include any device initialization. An application must initialize the device as necessary with ",(0,d.jsx)(n.code,{children:"GfxCfg()"})," before using any drawing functions, like in the examples below."]})}),"\n",(0,d.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,d.jsx)(n.p,{children:"Before any drawing operations, the system needs to know what device it will access and what pixel mapping it needs to process internally."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"GfxCfg (type, {cfg}, width, height, mode)"})," Is needed to set the device ",(0,d.jsx)(n.code,{children:"type"})," with ",(0,d.jsx)(n.code,{children:"width"})," and ",(0,d.jsx)(n.code,{children:"height"}),". The ",(0,d.jsx)(n.code,{children:"{cfg}"})," depends on the device type."]}),"\n",(0,d.jsxs)(n.p,{children:["When ",(0,d.jsx)(n.code,{children:"mode"})," is 0 then graphics is sent directly to display. No need for internal buffering and no need for ",(0,d.jsx)(n.code,{children:"Show()"}),". This uses a lot less memory."]}),"\n",(0,d.jsxs)(n.p,{children:["When ",(0,d.jsx)(n.code,{children:"mode"})," is more than 0 then the engine uses buffering for graphics, where the value is the pixel multiplier. For example, setting ",(0,d.jsx)(n.code,{children:"mode"})," to 3 will cause the graphics engine to multiply each pixel 3 times horizontally and vertically, 9 pixels in total. A 320x240 display runs at 106x80 pixels."]}),"\n",(0,d.jsxs)(n.p,{children:["When selecting to use graphics with ",(0,d.jsx)(n.code,{children:"mode"})," set to more than 0 (use graphics buffering), make sure the overall memory need is under 10KBytes. 320x240 with 3x multiplier is 106x80, needing 8,480 Bytes."]}),"\n",(0,d.jsx)(n.p,{children:"Supported device types:"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:(0,d.jsx)(n.code,{children:"{cfg}"})})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"0"}),(0,d.jsx)(n.td,{children:"None (default)"}),(0,d.jsx)(n.td,{})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"1"}),(0,d.jsx)(n.td,{children:"I2C Display"}),(0,d.jsxs)(n.td,{children:["The I2C display's ",(0,d.jsx)(n.code,{children:"{address}"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"2"}),(0,d.jsx)(n.td,{children:"SPI Display"}),(0,d.jsxs)(n.td,{children:["The SPI display's ",(0,d.jsx)(n.code,{children:"{chipselect, control}"})," pins."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"3"}),(0,d.jsx)(n.td,{children:"NeoPixel WS2812"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"{pin, pwidth, pheight, scan}"}),". Configure for LED matrix connected to ",(0,d.jsx)(n.code,{children:"pin"}),", with individual panel width ",(0,d.jsx)(n.code,{children:"pwidth"})," and height ",(0,d.jsx)(n.code,{children:"pheight"}),",  with ",(0,d.jsx)(n.code,{children:"scan"})," horizontal (0) or vertical (1)."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"4"}),(0,d.jsx)(n.td,{children:"LED Matrix Scanner"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"{cfg}"})," the first element sets for common-cathode (1) or common-anode (0). Then followed by data pin then scan pins. The ",(0,d.jsx)(n.code,{children:"width"})," and ",(0,d.jsx)(n.code,{children:"height"})," are used to determine how many pins are used for data and scan, respectively."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"5"}),(0,d.jsx)(n.td,{children:"LED Matrix List"}),(0,d.jsxs)(n.td,{children:["- ",(0,d.jsx)(n.code,{children:"{cfg}"})," contains a 2D list of LEDs pins, with ",(0,d.jsx)(n.code,{children:"width"})," and ",(0,d.jsx)(n.code,{children:"height"})," layout."]})]})]})]}),"\n",(0,d.jsx)(n.admonition,{type:"tip",children:(0,d.jsx)(n.p,{children:"Not all types support both direct and buffered modes. See individual modes for supported types."})}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"drawing",children:"Drawing"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Function"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Clear(color)"})}),(0,d.jsxs)(n.td,{children:["Clear the buffer to ",(0,d.jsx)(n.code,{children:"color"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Pixel(color, x, y)"})}),(0,d.jsxs)(n.td,{children:["Set a ",(0,d.jsx)(n.code,{children:"color"})," pixel at ",(0,d.jsx)(n.code,{children:"x"}),",",(0,d.jsx)(n.code,{children:"y"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Circle(color, x, y, radius)"})}),(0,d.jsxs)(n.td,{children:["Draw a ",(0,d.jsx)(n.code,{children:"color"})," circle at ",(0,d.jsx)(n.code,{children:"x"}),",",(0,d.jsx)(n.code,{children:"y"})," with ",(0,d.jsx)(n.code,{children:"radius"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Line(color, x1, y1, x2, y2)"})}),(0,d.jsxs)(n.td,{children:["Draw a ",(0,d.jsx)(n.code,{children:"color"})," line starting at ",(0,d.jsx)(n.code,{children:"x1"}),",",(0,d.jsx)(n.code,{children:"y1"})," and ending at ",(0,d.jsx)(n.code,{children:"x2"}),",",(0,d.jsx)(n.code,{children:"y2"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Rect(color, x, y, width, height)"})}),(0,d.jsxs)(n.td,{children:["Draw a ",(0,d.jsx)(n.code,{children:"color"})," rectangle at ",(0,d.jsx)(n.code,{children:"x"}),",",(0,d.jsx)(n.code,{children:"y"})," with ",(0,d.jsx)(n.code,{children:"width"})," and ",(0,d.jsx)(n.code,{children:"height"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Fill(color, x, y, width, height)"})}),(0,d.jsxs)(n.td,{children:["Fill an area with ",(0,d.jsx)(n.code,{children:"color"}),", starting at ",(0,d.jsx)(n.code,{children:"x"}),",",(0,d.jsx)(n.code,{children:"y"})," with ",(0,d.jsx)(n.code,{children:"width"})," and ",(0,d.jsx)(n.code,{children:"height"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'Text("text", color, x, y)'})}),(0,d.jsxs)(n.td,{children:["Draw 7x5px ",(0,d.jsx)(n.code,{children:"text"})," with ",(0,d.jsx)(n.code,{children:"color"})," at ",(0,d.jsx)(n.code,{children:"x"}),",",(0,d.jsx)(n.code,{children:"y"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'TextS("text", color, x, y, scaleWidth, scaleHeight)'})}),(0,d.jsxs)(n.td,{children:["Same as ",(0,d.jsx)(n.code,{children:"Text()"})," but adds ",(0,d.jsx)(n.code,{children:"scaleWidth"})," and ",(0,d.jsx)(n.code,{children:"scaleHeight"})]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'TextT("text", color, x, y)'})}),(0,d.jsxs)(n.td,{children:["Draw a tine 5x5px ",(0,d.jsx)(n.code,{children:"text"})," with ",(0,d.jsx)(n.code,{children:"color"})," at ",(0,d.jsx)(n.code,{children:"x"}),",",(0,d.jsx)(n.code,{children:"y"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Img({image}, x, y, w, h, transform)"})}),(0,d.jsxs)(n.td,{children:["Draw an ",(0,d.jsx)(n.code,{children:"image"})," at ",(0,d.jsx)(n.code,{children:"x"}),",",(0,d.jsx)(n.code,{children:"y"})," with ",(0,d.jsx)(n.code,{children:"transform"}),": 0 = none, 1 = 90 deg, 2 = 180 deg, 3 = 270 deg, 4 = Flip horz, 5 = Flip vert"]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"ImgS({image}, x, y, w, h, transform, scaleWidth, scaleHeight)"})}),(0,d.jsxs)(n.td,{children:["Same as ",(0,d.jsx)(n.code,{children:"Img()"})," but adds ",(0,d.jsx)(n.code,{children:"scaleWidth"})," and ",(0,d.jsx)(n.code,{children:"scaleHeight"})]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Show()"})}),(0,d.jsx)(n.td,{children:"Show graphics buffer on the configured device."})]})]})]}),"\n",(0,d.jsxs)(n.admonition,{type:"tip",children:[(0,d.jsx)(n.p,{children:"When using buffered mode, the graphics buffer is not cleared automatically. Also, the display is not cleared automatically in direct mode."}),(0,d.jsxs)(n.p,{children:["Always start with ",(0,d.jsx)(n.code,{children:"Clear()"}),"."]})]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"color",children:"Color"}),"\n",(0,d.jsx)(n.p,{children:"All color arguments take 24BPP format RRGGBB, similar to what is used on the web. When using direct mode, the full color is used. In buffered graphics mode, the system store pixels as 8BPP 3R3G2B (256 colors). The 8BPP is scaled from 24BPP RRGGBB. Color pallette is not supported."}),"\n",(0,d.jsxs)(n.p,{children:["In direct mode, drawing goes directly on the display, where ",(0,d.jsx)(n.code,{children:"Show()"})," doesn't do anything."]}),"\n",(0,d.jsx)(n.admonition,{type:"tip",children:(0,d.jsx)(n.p,{children:"Color 1 is a special color that results in white 0xFFFFFF, useful for code samples that work on both color and B&W displays."})}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"image",children:"Image"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"/img/image-array.png",alt:"Image Array"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"Img()"})," function uses a color array bitmap to create an image. These arrays can sometimes be visualized when looking at the array."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:"Dim a1[8*8] = {\r\n0, 0, 0, 1, 1, 0, 0, 0,\r\n0, 0, 1, 1, 1, 1, 0, 0,\r\n0, 1, 1, 1, 1, 1, 1, 0,\r\n1, 1, 0, 1, 1, 0, 1, 1,\r\n1, 1, 1, 1, 1, 1, 1, 1,\r\n0, 0, 1, 0, 0, 1, 0, 0,\r\n0, 1, 0, 1, 1, 0, 1, 0,\r\n1, 0, 1, 0, 0, 1, 0, 1}\r\nClear(0)\r\nImg(a1,50,35,8,8,0)\r\nShow()\n"})}),"\n",(0,d.jsxs)(n.p,{children:["This example below creates the same sprite using color, note the use of ",(0,d.jsx)(n.code,{children:"Alias()"})," to make the code more readable, and change the colors of sections easier."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"/img/image-array-color.png",alt:"Color Image Array"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:"Alias(body=0x00ff00,hat=0xff00ff,legs=0x0000FF,back=0xFFFFFF)\r\n\r\nDim a1[8*8] = {\r\nback,back,back, hat, hat,back,back,back,\r\nback,back, hat, hat, hat, hat,back,back,\r\nback,body,body,body,body,body,body,back,\r\nbody,body,back,body,body,back,body,body,\r\nbody,body,body,body,body,body,body,body,\r\nback,back,body,back,back,body,back,back,\r\nback,legs,back,legs,legs,back,legs,back,\r\nlegs,back,legs,back,back,legs,back,legs}\r\nClear(1)\r\nImg(a1,50,35,8,8,0)\r\nShow()\n"})}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"spi-display",children:"SPI Display"}),"\n",(0,d.jsx)(n.p,{children:"SPI supports both, direct and buffered modes."}),"\n",(0,d.jsxs)(n.p,{children:["This example uses a 320x240 display, like ",(0,d.jsx)(n.a,{href:"../catalog/display/tft-cp23",children:"TFT CP23"})," in buffered mode with x3 multiplier."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:"_s = 5\r\n_r = 6\r\n_x = 50\r\n_d = -9\r\nInit()\r\n\r\nwhile 1\r\n    clear(0)\r\n    text(Str(_x), 0xffffff, 30, 5)\r\n    Circle(0xff,_x,50,5)\r\n    _x = _x + _d\r\n    if(_x < 0 || _x > 106)\r\n        _d = _d * -1\r\n    end\r\n    show()\r\nwend\r\n\r\n\r\nfn Init()\r\n\tdwrite(4,1)\r\n\tdwrite(7,1)\r\n    spicfg(0, 24000)\r\n    gfxcfg(2, {_s,_r},106,80, 3)# type 2, 106x80 pixels, buffered x3\r\n\tCmd(0xc8, [0xFF])\r\n\tCmd(0x93, [0xFF])\r\n\tCmd(0x36, [0xc8])\r\n\tCmd(0x3a, [0x55])\r\n\tCmd(0xc0, [0x10,0x10])\r\n\tCmd(0xc1, [0x36])\r\n\tCmd(0xc5, [0xc3])\r\n\tCmd(0xE0, [0x00,0x05,0x08,0x02,0x1a,0x0c,0x42,0x7a,0x54,0x08,0x0d,0x0c,0x23,0x25,0x0f])\r\n\tCmd(0xE1, [0x00,0x29,0x2f,0x03,0x0f,0x05,0x42,0x55,0x53,0x06,0x0f,0x0c,0x38,0x3a,0x0f])\r\n\tCmd(0x11,[])\r\n\tWait(120)\r\n\tCmd(0x36, [0xc8])\r\n\tCmd(0x2a, [0x00,0x00,0x01,0x3d])\r\n\tCmd(0xE1, [0x00,0x00,0x00,0xef])\r\n\tCmd(0x29,[])\r\nfend\r\n\r\nfn Cmd(c, b1)\r\n    ##SendCmd(c)\r\n    dwrite(_s, 0)#select\r\n    dwrite(_r, 0)#cmd\r\n    SpiWr(c)\r\n    dwrite(_r, 1)#data\r\n    for i in range(0,Len(b1))\r\n        SpiWr(b1[i])\r\n    next\r\n    dwrite(_s, 1)#deselect\r\nfend\n"})}),"\n",(0,d.jsxs)(n.p,{children:["In direct mode, you will likely not clear the entire screen is this will cause flicker. Only erase specific regions. Enjoy the full resolution and full color from any ",(0,d.jsx)(n.a,{href:"../system/intro",children:"Supported System"}),"!"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:'_s = 5\r\n_r = 6\r\n_x = 320/2\r\n_d = -9\r\nInit()\r\n\r\nclear(0)\r\nTextS("Amazing DUELink!", 0xFFA500, 20, 5,3,5)\r\nfor _i in range(0, 255, 10) #5bit color in 5:6:5 format\r\n    _c = _i #5 bit to 8 bit\r\n    _q = (0xFF -_i) # invert count on color\r\n    Line(_q<<8 | _c, 30, 80, _i+30, 240)\r\n    Line(_q<<16 | _c, 280, 80, 280-_i, 240)\r\nnext\r\n\r\n\r\nwhile 1\r\n    Circle(0xFF00ff, _x, 100, 8)\r\n    wait(10)\r\n    Circle(0, _x, 100, 8)# clear the circle area, not the whole screen\r\n    _x=_x+_d\r\n    if(_x < 120 || _x > 320-120)\r\n        _d = _d * -1\r\n    end\r\nwend\r\n\r\n\r\nfn Init()\r\n\tdwrite(4,1)\r\n\tdwrite(7,1)\r\n    spicfg(0, 24000)\r\n    gfxcfg(2, {_s,_r},320,240, 0)# type 2, 320x240 pixels, direct\r\n\tCmd(0xc8, [0xFF])\r\n\tCmd(0x93, [0xFF])\r\n\tCmd(0x36, [0xc8])\r\n\tCmd(0x3a, [0x55])\r\n\tCmd(0xc0, [0x10,0x10])\r\n\tCmd(0xc1, [0x36])\r\n\tCmd(0xc5, [0xc3])\r\n\tCmd(0xE0, [0x00,0x05,0x08,0x02,0x1a,0x0c,0x42,0x7a,0x54,0x08,0x0d,0x0c,0x23,0x25,0x0f])\r\n\tCmd(0xE1, [0x00,0x29,0x2f,0x03,0x0f,0x05,0x42,0x55,0x53,0x06,0x0f,0x0c,0x38,0x3a,0x0f])\r\n\tCmd(0x11,[])\r\n\tWait(120)\r\n\tCmd(0x36, [0xc8])\r\n\tCmd(0x2a, [0x00,0x00,0x01,0x3d])\r\n\tCmd(0xE1, [0x00,0x00,0x00,0xef])\r\n\tCmd(0x29,[])\r\nfend\r\n\r\nfn Cmd(c, b1)\r\n    ##SendCmd(c)\r\n    dwrite(_s, 0)#select\r\n    dwrite(_r, 0)#cmd\r\n    SpiWr(c)\r\n    dwrite(_r, 1)#data\r\n    for i in range(0,Len(b1))\r\n        SpiWr(b1[i])\r\n    next\r\n    dwrite(_s, 1)#deselect\r\nfend\n'})}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"i2c-display",children:"I2C Display"}),"\n",(0,d.jsx)(n.p,{children:"I2C supports buffered mode only, with x1 multiplier."}),"\n",(0,d.jsxs)(n.p,{children:["In this case, we are using SSD1306. This display is found on ",(0,d.jsx)(n.a,{href:"../catalog/microcomputer/pixobit",children:"PixoBit"})," microcomputer and ",(0,d.jsx)(n.a,{href:"../catalog/display/oled-096",children:"OLED 096"})," display."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:"dim b1[2]\r\n_x = 50\r\n_d = -9\r\nInit()\r\n\r\n\r\nwhile 1\r\n    clear(1)\r\n    texts(Str(_x), 0, 50, 5, 2, 2)\r\n    Circle(0, _x, 50, 5)\r\n    _x=_x+_d\r\n    if(_x < 0 || _x > 106)\r\n        _d = _d * -1\r\n    end\r\n    show()\r\nwend\r\n\r\nfn Init()\r\n\tdwrite(11, 1) # reset pin\r\n    # config I2C bus with 400Kz\r\n    i2ccfg(400)\r\n\tWait(20)\r\n    gfxcfg(1,{0x3C}, 128, 64, 1)# type 1, 128x64 pixels, buffered x1\r\n\r\n\r\n\tSendCmd(0xAE):SendCmd(0x00):SendCmd(0x10)\r\n\tSendCmd(0x40):SendCmd(0x81):SendCmd(0xCF)\r\n\tSendCmd(0xA1):SendCmd(0xA6):SendCmd(0xA8)\r\n\tSendCmd(0x3F):SendCmd(0xD3):SendCmd(0x00)\r\n\tSendCmd(0xD5):SendCmd(0x80):SendCmd(0xD9)\r\n\tSendCmd(0xF1):SendCmd(0xDA):SendCmd(0x12)\r\n\tSendCmd(0xDB):SendCmd(0x40):SendCmd(0x8D)\r\n\tSendCmd(0x14):SendCmd(0xAF):SendCmd(0xC8)\r\n\tSendCmd(0x20):SendCmd(0x00):SendCmd(0x21)\r\n\tSendCmd(0):SendCmd(128-1)\r\n\tSendCmd(0x22):SendCmd(0):SendCmd(7)\r\nfend\r\n\r\nfn SendCmd(c)\r\n\tb1[0] = 0\r\n\tb1[1] = c\r\n    i2cwr(0x3c, b1, 0)\r\nfend\n"})}),"\n",(0,d.jsx)(n.h2,{id:"neopixel-smart-leds",children:"NeoPixel Smart LEDs"}),"\n",(0,d.jsx)(n.p,{children:"NeoPixel supports buffered graphics only, with x1 multiplier."}),"\n",(0,d.jsx)(n.p,{children:"Typical NeoPixel displays consists of one or more panels. Each panel has LEDs connected in a zigzag pattern."}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"/img/neopixel-zigzag.png",alt:"NeoPixel Zigzag"})}),"\n",(0,d.jsx)(n.p,{children:"Calculating the absolute pixel position can be challenging, but not to worry as the graphics engine handles all that automatically."}),"\n",(0,d.jsx)(n.p,{children:"When connecting panels horizontally the panels need to be ordered follows:"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"/img/neopixel-horizontal-signal.png",alt:"Horizontal signal path"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:'# 3 horizontal 16x16 panelsm creating 48x16 display\r\ndim a1[]={1,# Pin used\r\n    16, # Individual panel width\r\n    16, # Individual panel height\r\n    0} # Horizontal scanning\r\n    GfxCfg(3, a1, 48, 16, 1)# type 3, 48x16 leds, buffered x1\r\n\r\n_x = 6\r\n\r\nwhile 1\r\n    TextS("DUELink", 5, _x, 0, 1, 2)\r\n    Show()\r\n    _x = _x + 1\r\n    if _x < -20\r\n        _x = 6\r\n    end\r\n    wait(100)\r\nwend\r\n\n'})}),"\n",(0,d.jsx)(n.p,{children:'When connecting panels in a matrix, to build up larger "panels", they need to be connected as follows:'}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"/img/neopixel-vertical-signal.png",alt:"Horizontal signal path"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:'# 4 panels placed as 2x2, where each one is 16x16 pixels, creating 48x48 pixel displays\r\ndim a1[]= {1,# Pin used\r\n    16, # Individual panel width\r\n    16, # Individual panel height\r\n    0} # Horizontal scanning\r\n    GfxCfg(3, a1, 48, 48, 1)# type 3, 48x48 leds, buffered x1\r\n\r\n_x = 6\r\n\r\nwhile 1\r\n    TextS("DUELink", 5, _x, 0, 1, 2)\r\n    Show()\r\n    _x = _x + 1\r\n    if _x < -20\r\n        _x = 6\r\n    end\r\n    wait(100)\r\nwend\r\n\n'})}),"\n",(0,d.jsx)(n.p,{children:"It is also possible to connect panels vertically by simply ordering them exactly same as the matrix above, but only use the first left column."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:'## 3 vertical panels of 16x16 each creating 16x48 display\r\ndim a1[]={1,# Pin used\r\n    16, # Individual panel width\r\n    16, # Individual panel height\r\n    0} # Horizontal scanning\r\n    GfxCfg(3, a1, 16, 48, 1)# type 3, 16x48 leds, buffered x1\r\n\r\n_x = 6\r\n\r\nwhile 1\r\n    TextS("DUELink", 5, _x, 0, 1, 2)\r\n    Show()\r\n    _x = _x + 1\r\n    if _x < -20\r\n        _x = 6\r\n    end\r\n    wait(100)\r\nwend\r\n\n'})}),"\n",(0,d.jsx)(n.p,{children:"It is possible to make your own panels using LED strips. For example, 5 strips of 50 LED each can be used to make a 50x5 LED panel. The strips needs to be connected in a zigzag pattern. This makes it easier to run the connections anyway."}),"\n",(0,d.jsx)(n.p,{children:"This is a partial image to demonstrate the connections."}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"/img/ledstrip-signal.png",alt:"LED strip signal path"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:'dim a1[]={1, # Pin used\r\n    50, # Individual panel width\r\n    5, # Individual panel height\r\n    0} # Horizontal scanning\r\n    GfxCfg(3,a1,50,5, 1)# type 3, 50x5 leds, buffered x1\r\n\r\n_x = 50\r\n\r\nwhile 1\r\n    TextT("DUELink", 5, _x, 0)\r\n    Show()\r\n    _x =_x + 1\r\n    if _x < -20\r\n        _x = 50\r\n    end\r\n    wait(100)\r\nwend\r\n\n'})}),"\n",(0,d.jsx)(n.p,{children:"A single strip of NeoPixel LEDs is nothing but a panel with a single row. This example assumes a strip of 50 pixels."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:"dim a1[]={1, #pin used\r\n    50, #individual panel width\r\n    1} #individual panel height\r\n    GfxCfg(3, a1, 50, 1, 1)\r\n\r\n_x = 0\r\n\r\nwhile 1\r\n    Pixel(0x110011, _x, 0)\r\n    Show()\r\n    _x =_x + 1\r\n    if _x > 50\r\n        _x = 0\r\n        Clear(0)\r\n    end\r\nwend\r\n\n"})}),"\n",(0,d.jsx)(n.h2,{id:"led-matrix-scanner",children:"LED Matrix Scanner"}),"\n",(0,d.jsxs)(n.p,{children:["This is a perfect match for ",(0,d.jsx)(n.a,{href:"../catalog/microcomputer/cincobit",children:"CincoBit"})," with its 5x5 LED matrix. This type supports buffered mode, with 1x multiplier only."]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"/img/catalog/cincobit-front.png",alt:"CincoBit"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:'dim a1[10] = {0,11,19,18,21,22,7,5,0,8,6} # first 5 for data, second 5 for scan\r\n\r\ngfxcfg(4, a1, 5, 5, 1)# type 4: 5x5 type, 1: buffered x1\r\n\r\nwhile 1\r\n    TextT("DUELink", 1, _x, 0)\r\n    Show()\r\n    _x = _x - 1\r\n    if _x < -20\r\n        _x = 6\r\n    end\r\n    wait(100)\r\n    end\r\n\r\n    wait(250)\r\n    clear(0)\r\n\r\nwend\r\n\n'})}),"\n",(0,d.jsxs)(n.p,{children:["The scanner also works great for other LED modules, such as ",(0,d.jsx)(n.a,{href:"/docs/catalog/led/led-s404",children:"LED S404"})," and others. The data are used to set the individual segments and the scanner pins sweep through the individual digits."]}),"\n",(0,d.jsx)(n.p,{children:"The LED driver helps in setting the right pixels to show the wanted digits."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:"dim a1[13] = {1,1,2,3,4,5,6,7,8,9,10,11,12} # common pin, first 8 for data, second 4 for scan\r\n\r\ngfxcfg(4, a1, 8, 4, 1)# type 4: 7seg (8 leds) x 4 digits, 1: buffered x1\r\n\r\n# Show number 1 by turning on the right 2 LEDs on the first segment\r\nClear(0)\r\nPixel(1,2,0)\r\nPixel(1,1,0)\r\nShow()\r\n\n"})}),"\n",(0,d.jsx)(n.h2,{id:"led-matrix-list",children:"LED Matrix List"}),"\n",(0,d.jsxs)(n.p,{children:["In this mode, the graphics engine scans and updates the LEDs one at a time. This mode works great with ",(0,d.jsx)(n.a,{href:"../catalog/led/led-mt1208",children:"LED MT1208"}),".\r\nIn this mode, an array containing a list of each LED pins. This is only supported in buffered mode, with x1 multiplier."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-py",children:'dim a1[]={1,12,\r\n    12,1,\r\n    1,3,\r\n    3,1,\r\n    12,3,#5\r\n    3,12,\r\n    1,4,\r\n    4,1,\r\n    12,4,\r\n    4,12,#10\r\n    3,4,\r\n    4,3,\r\n    1,5,\r\n    5,1,\r\n    12,5,#15\r\n    5,12,\r\n    3,5,\r\n    5,3,\r\n    4,5,\r\n    5,4,#20\r\n    1,13,\r\n    13,1,\r\n    12,13,\r\n    13,12, #24\r\n    ## add the rest, to 96!\r\n\r\n\r\n    \r\n    \r\n    }\r\n    GfxCfg(5, a1, 12, 8, 1)# type 5, 12x8 leds, buffered x1\r\n\r\n_x = 6\r\nwhile 1\r\n    Text("DUELink", 0xFFFFFF, _x, 0)\r\n    Show()\r\n    _x = _x + 1\r\n    if _x < -20\r\n        _x = 6\r\n    end\r\n    wait(100)\r\nwend\r\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(x,{...e})}):x(e)}}}]);